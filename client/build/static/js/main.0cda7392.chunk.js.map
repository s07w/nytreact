{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","cards","clickedCardIds","score","goal","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Score_Score","components_Wrapper_Wrapper","map","card","components_Card_Card","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0cda7392.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Card.css\";\n\nconst Card = props => (\n    <div className=\"card img-container hover\">\n        <img alt={props.name} src={props.image} id={props.id}\n        onClick = {() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\n    </div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Score.css\";\n// import Arrow from 'react-icons/lib/fa/caret-right';\n\nconst Score = props => (\n   <div className=\"gameScore\">\n        <h3 className=\"score\">Your score: {props.total}</h3>\n        <h3 className=\"status\">{props.status}</h3>\n   </div>\n);\n\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        cards,\n        clickedCardIds: [],\n        score: 0,\n        goal: 9,\n        status: \"\"\n    };\n\n    shuffleScoreCard = id => {\n        let clickedCardIds = this.state.clickedCardIds;\n\n        if (clickedCardIds.includes(id)) {\n            this.setState({ clickedCardIds: [], score: 0, status: \"Game over! Click to play again\"});\n            return;\n        } else {\n            clickedCardIds.push(id)\n\n            if(clickedCardIds.length === 9) {\n                this.setState({score: 9, status: \" ðŸŽ‰ You won! Nice job. Click to play again. ðŸŽŠ\", clickedCardIds: []});\n                console.log(\"Winner\");\n                return;\n            }\n\n            this.setState({cards, clickedCardIds, score: clickedCardIds.length, status: \"\" });\n\n            for (let i = cards.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1));\n                [cards[i], cards[j]] = [cards[j], cards[i]];\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className = \"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Clicky Game</h1>\n                    <p className=\"App-intro\">\n                    Try not to click the same image twice\n                    </p>\n                </header>\n                <Score total={this.state.score}\n                goal={9}\n                status={this.state.status}\n                />\n                <Wrapper>\n                    {this.state.cards.map(card => (\n                        <Card\n                            shuffleScoreCard = {this.shuffleScoreCard}\n                            id={card.id}\n                            key={card.id}\n                            image={card.image}\n                            />\n                    ))}\n                </Wrapper>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();"],"sourceRoot":""}